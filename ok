#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <time.h>

#define MAX_USERS 100
#define MAX_FRIENDS 10
#define MAX_REQUESTS 10
#define MAX_MESSAGES 100
#define ID_LENGTH 20
#define MESSAGE_LENGTH 200
#define FILE_NAME "users.db"

// Message structure
struct Message {
    char senderID[ID_LENGTH];
    char receiverID[ID_LENGTH];
    char content[MESSAGE_LENGTH];
    char timestamp[30];
};

// User structure
struct User {
    char userID[ID_LENGTH];
    char displayName[50];
    char password[50];
    char friends[MAX_FRIENDS][ID_LENGTH];
    int friendCount;

    char requests[MAX_REQUESTS][ID_LENGTH];
    int requestCount;

    char requested[MAX_REQUESTS][ID_LENGTH];
    int requestedCount;

    struct Message messages[MAX_MESSAGES];
    int messageCount;
};

// Global variables
struct User users[MAX_USERS];
int userCount = 0;

// Function prototypes
void saveUsersToFile();
void loadUsersFromFile();
void loggedInMenu(int currentUserIndex);
void chatboxMenu(int currentUserIndex);

// Helper function to get the current timestamp
void getCurrentTimestamp(char *timestamp) {
    time_t now = time(NULL);
    struct tm *t = localtime(&now);
    strftime(timestamp, 30, "%Y-%m-%d %H:%M:%S", t);
}

// Function to display the chatbox menu
void chatboxMenu(int currentUserIndex) {
    printf("\n--- Chatbox ---\n");
    if (users[currentUserIndex].friendCount == 0) {
        printf("No friends to chat with.\n");
        return;
    }

    printf("Select a friend to open chat:\n");
    for (int i = 0; i < users[currentUserIndex].friendCount; i++) {
        int friendIndex = findUserIndexByID(users[currentUserIndex].friends[i]);
        printf("%d. %s (%s)\n", i + 1, users[friendIndex].displayName, users[friendIndex].userID);
    }
    printf("0. Go back\n");

    int choice;
    printf("Enter your choice: ");
    scanf("%d", &choice);

    if (choice == 0) return; // Go back to the previous menu

    if (choice < 1 || choice > users[currentUserIndex].friendCount) {
        printf("Invalid choice!\n");
        return;
    }

    int friendIndex = findUserIndexByID(users[currentUserIndex].friends[choice - 1]);
    chatWindow(currentUserIndex, friendIndex);
}

// Function to display and manage the chat window
void chatWindow(int currentUserIndex, int friendIndex) {
    printf("\n--- Chat with %s (%s) ---\n", users[friendIndex].displayName, users[friendIndex].userID);

    // Display chat history
    printf("\nChat History:\n");
    for (int i = 0; i < users[currentUserIndex].messageCount; i++) {
        struct Message msg = users[currentUserIndex].messages[i];
        if ((strcmp(msg.senderID, users[currentUserIndex].userID) == 0 && strcmp(msg.receiverID, users[friendIndex].userID) == 0) ||
            (strcmp(msg.senderID, users[friendIndex].userID) == 0 && strcmp(msg.receiverID, users[currentUserIndex].userID) == 0)) {
            printf("[%s] %s: %s\n", msg.timestamp, msg.senderID, msg.content);
        }
    }

    // Send a new message
    char content[MESSAGE_LENGTH];
    printf("\nEnter your message (or type 'exit' to go back): ");
    getchar(); // Clear input buffer
    fgets(content, MESSAGE_LENGTH, stdin);
    content[strcspn(content, "\n")] = '\0'; // Remove newline character

    if (strcmp(content, "exit") == 0) return;

    // Create and store the new message
    struct Message newMessage;
    strcpy(newMessage.senderID, users[currentUserIndex].userID);
    strcpy(newMessage.receiverID, users[friendIndex].userID);
    strcpy(newMessage.content, content);
    getCurrentTimestamp(newMessage.timestamp);

    users[currentUserIndex].messages[users[currentUserIndex].messageCount++] = newMessage;
    users[friendIndex].messages[users[friendIndex].messageCount++] = newMessage;

    saveUsersToFile();  // Save the messages to file

    printf("Message sent!\n");
    chatWindow(currentUserIndex, friendIndex);  // Reload the chat window
}

// Updated logged-in menu to include chatbox
void loggedInMenu(int currentUserIndex) {
    int choice;
    do {
        printf("\n--- Logged-in Menu ---\n");
        printf("1. View friends\n");
        printf("2. Send friend request\n");
        printf("3. Check friend requests\n");
        printf("4. Suggest friends\n");
        printf("5. Remove friend\n");
        printf("6. Chatbox\n");
        printf("7. Logout\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1: displayFriends(currentUserIndex); break;
            case 2: addFriend(currentUserIndex); break;
            case 3: checkFriendRequests(currentUserIndex); break;
            case 4: suggestFriends(currentUserIndex); break;
            case 5: removeFriend(currentUserIndex); break;
            case 6: chatboxMenu(currentUserIndex); break;
            case 7: printf("Logged out.\n"); break;
            default: printf("Invalid choice!\n");
        }
    } while (choice != 7);
}
