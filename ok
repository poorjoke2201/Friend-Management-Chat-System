#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>

#define MAX_USERS 100
#define MAX_FRIENDS 10
#define MAX_REQUESTS 10
#define MAX_CHAT_MESSAGES 50
#define MESSAGE_LENGTH 256
#define ID_LENGTH 20
#define FILE_NAME "users.db"

// User structure
struct User {
    char userID[ID_LENGTH];                  // Unique User ID (string)
    char displayName[50];                    // Display Name
    char password[50];                       // Password
    char friends[MAX_FRIENDS][ID_LENGTH];    // Friends (store UserIDs)
    int friendCount;
    char requests[MAX_REQUESTS][ID_LENGTH];  // Incoming friend requests
    int requestCount;
    char requested[MAX_REQUESTS][ID_LENGTH]; // Sent friend requests
    int requestedCount;
    char chatHistory[MAX_FRIENDS][MAX_CHAT_MESSAGES][MESSAGE_LENGTH]; // Chat history for each friend
    int chatCount[MAX_FRIENDS];              // Number of messages for each friend
};

// Global variables
struct User users[MAX_USERS];
int userCount = 0;

// Function prototypes
void saveUsersToFile();
void loadUsersFromFile();
int findUserIndexByID(const char *userID);
void createNewUser();
void displayTotalUsers();
void loginUser();
void loggedInMenu(int currentUserIndex);
void addFriend(int currentUserIndex);
void displayFriends(int currentUserIndex);
void removeFriend(int currentUserIndex);
void suggestFriends(int currentUserIndex);
void checkFriendRequests(int currentUserIndex);
void openChatbox(int currentUserIndex);

// Function to save users to file
void saveUsersToFile() {
    FILE *file = fopen(FILE_NAME, "wb");
    if (!file) {
        printf("Error opening file for saving data!\n");
        return;
    }
    fwrite(&userCount, sizeof(int), 1, file);
    fwrite(users, sizeof(struct User), userCount, file);
    fclose(file);
}

// Function to load users from file
void loadUsersFromFile() {
    FILE *file = fopen(FILE_NAME, "rb");
    if (!file) {
        printf("No saved data found, starting fresh.\n");
        return;
    }
    fread(&userCount, sizeof(int), 1, file);
    fread(users, sizeof(struct User), userCount, file);
    fclose(file);
}

// Helper function to find user index by ID
int findUserIndexByID(const char *userID) {
    for (int i = 0; i < userCount; i++) {
        if (strcmp(users[i].userID, userID) == 0)
            return i;
    }
    return -1;
}

// Function to create a new user
void createNewUser() {
    char userID[ID_LENGTH], displayName[50], password[50];

    printf("Enter a new UserID: ");
    scanf("%s", userID);

    if (findUserIndexByID(userID) != -1) {
        printf("Error: UserID '%s' already exists.\n", userID);
        return;
    }

    printf("Enter Display Name: ");
    scanf("%s", displayName);

    printf("Enter Password: ");
    scanf("%s", password);

    strcpy(users[userCount].userID, userID);
    strcpy(users[userCount].displayName, displayName);
    strcpy(users[userCount].password, password);
    users[userCount].friendCount = 0;
    users[userCount].requestCount = 0;
    users[userCount].requestedCount = 0;
    memset(users[userCount].chatCount, 0, sizeof(users[userCount].chatCount)); // Initialize chat count to 0

    userCount++;
    saveUsersToFile();

    printf("User created successfully!\n");
}

// Function to display total users
void displayTotalUsers() {
    printf("Total number of users: %d\n", userCount);
}

// Function to display the chatbox
void openChatbox(int currentUserIndex) {
    if (users[currentUserIndex].friendCount == 0) {
        printf("You have no friends to chat with.\n");
        return;
    }

    printf("\nYour Friends:\n");
    for (int i = 0; i < users[currentUserIndex].friendCount; i++) {
        int friendIndex = findUserIndexByID(users[currentUserIndex].friends[i]);
        if (friendIndex != -1) {
            printf("%d. %s (UserID: %s)\n", i + 1, users[friendIndex].displayName, users[friendIndex].userID);
        }
    }

    int choice;
    printf("\nEnter the number of the friend to chat with or 0 to go back: ");
    scanf("%d", &choice);

    if (choice < 1 || choice > users[currentUserIndex].friendCount) {
        printf("Returning to main menu.\n");
        return;
    }

    int friendIndex = findUserIndexByID(users[currentUserIndex].friends[choice - 1]);
    if (friendIndex == -1) {
        printf("Error finding friend. Returning to menu.\n");
        return;
    }

    printf("\nChat with %s (UserID: %s):\n", users[friendIndex].displayName, users[friendIndex].userID);

    int chatIndex = choice - 1;
    for (int i = 0; i < users[currentUserIndex].chatCount[chatIndex]; i++) {
        printf("%s\n", users[currentUserIndex].chatHistory[chatIndex][i]);
    }

    char message[MESSAGE_LENGTH];
    printf("\nEnter your message (type 'exit' to go back): ");
    while (1) {
        getchar(); // Clear input buffer
        fgets(message, MESSAGE_LENGTH, stdin);
        message[strcspn(message, "\n")] = '\0'; // Remove newline character

        if (strcmp(message, "exit") == 0) {
            break;
        }

        // Save the message in the chat history
        snprintf(users[currentUserIndex].chatHistory[chatIndex][users[currentUserIndex].chatCount[chatIndex]++],
                 MESSAGE_LENGTH, "You: %s", message);
        snprintf(users[friendIndex].chatHistory[findUserIndexByID(users[currentUserIndex].userID)][users[friendIndex].chatCount[chatIndex]++],
                 MESSAGE_LENGTH, "%s: %s", users[currentUserIndex].displayName, message);

        saveUsersToFile();

        printf("\nMessage sent! Enter another message or type 'exit' to leave: ");
    }
}

// Add other functions (e.g., addFriend, removeFriend, etc.) from the previous code
// Add the main menu to integrate `openChatbox`

// Main function
int main() {
    int choice;
    loadUsersFromFile();

    do {
        printf("\n--- Main Menu ---\n");
        printf("1. Check total users\n");
        printf("2. Create new user\n");
        printf("3. Login to an account\n");
        printf("4. Exit\n");
        printf("Enter choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                displayTotalUsers();
                break;
            case 2:
                createNewUser();
                break;
            case 3:
                loginUser();
                break;
            case 4:
                printf("Exiting program. Goodbye!\n");
                break;
            default:
                printf("Invalid choice!\n");
        }
    } while (choice != 4);

    return 0;
}
