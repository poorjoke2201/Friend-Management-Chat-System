#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <time.h>

#define MAX_USERS 100
#define MAX_FRIENDS 10
#define MAX_REQUESTS 10
#define MAX_MESSAGES 100
#define ID_LENGTH 20
#define MESSAGE_LENGTH 200
#define FILE_NAME "users.db"

struct Message {
    char senderID[ID_LENGTH];
    char receiverID[ID_LENGTH];
    char content[MESSAGE_LENGTH];
    char timestamp[30];
};

struct User {
    char userID[ID_LENGTH];
    char displayName[50];
    char password[50];
    char friends[MAX_FRIENDS][ID_LENGTH];
    int friendCount;

    char requests[MAX_REQUESTS][ID_LENGTH];
    int requestCount;

    char requested[MAX_REQUESTS][ID_LENGTH];
    int requestedCount;

    struct Message messages[MAX_MESSAGES];
    int messageCount;
};

struct User users[MAX_USERS];
int userCount = 0;

void saveUsersToFile() {
    FILE *file = fopen(FILE_NAME, "wb");
    if (file) {
        fwrite(&userCount, sizeof(int), 1, file);
        fwrite(users, sizeof(struct User), userCount, file);
        fclose(file);
    }
}

void loadUsersFromFile() {
    FILE *file = fopen(FILE_NAME, "rb");
    if (file) {
        fread(&userCount, sizeof(int), 1, file);
        fread(users, sizeof(struct User), userCount, file);
        fclose(file);
    }
}

void getCurrentTimestamp(char *timestamp) {
    time_t now = time(NULL);
    struct tm *t = localtime(&now);
    strftime(timestamp, 30, "%Y-%m-%d %H:%M:%S", t);
}

int findUserIndexByID(const char *userID) {
    for (int i = 0; i < userCount; i++) {
        if (strcmp(users[i].userID, userID) == 0) {
            return i;
        }
    }
    return -1;
}

void registerUser() {
    if (userCount >= MAX_USERS) {
        printf("User limit reached. Cannot register more users.\n");
        return;
    }

    struct User newUser;
    printf("Enter User ID: ");
    scanf("%s", newUser.userID);

    if (findUserIndexByID(newUser.userID) != -1) {
        printf("User ID already exists.\n");
        return;
    }

    printf("Enter Display Name: ");
    scanf("%s", newUser.displayName);
    printf("Enter Password: ");
    scanf("%s", newUser.password);

    newUser.friendCount = 0;
    newUser.requestCount = 0;
    newUser.requestedCount = 0;
    newUser.messageCount = 0;

    users[userCount++] = newUser;
    saveUsersToFile();
    printf("User registered successfully.\n");
}

int loginUser() {
    char userID[ID_LENGTH], password[50];
    printf("Enter User ID: ");
    scanf("%s", userID);
    printf("Enter Password: ");
    scanf("%s", password);

    int index = findUserIndexByID(userID);
    if (index == -1 || strcmp(users[index].password, password) != 0) {
        printf("Invalid User ID or Password.\n");
        return -1;
    }
    printf("Login successful. Welcome %s!\n", users[index].displayName);
    return index;
}

void displayFriends(int currentUserIndex) {
    printf("\n--- Friends List ---\n");
    if (users[currentUserIndex].friendCount == 0) {
        printf("No friends yet.\n");
        return;
    }
    for (int i = 0; i < users[currentUserIndex].friendCount; i++) {
        int friendIndex = findUserIndexByID(users[currentUserIndex].friends[i]);
        printf("%d. %s (%s)\n", i + 1, users[friendIndex].displayName, users[friendIndex].userID);
    }
}

void addFriend(int currentUserIndex) {
    char friendID[ID_LENGTH];
    printf("Enter the User ID of the person you want to add: ");
    scanf("%s", friendID);

    int friendIndex = findUserIndexByID(friendID);
    if (friendIndex == -1) {
        printf("User not found.\n");
        return;
    }

    if (currentUserIndex == friendIndex) {
        printf("You cannot add yourself as a friend.\n");
        return;
    }

    for (int i = 0; i < users[currentUserIndex].friendCount; i++) {
        if (strcmp(users[currentUserIndex].friends[i], friendID) == 0) {
            printf("You are already friends with this user.\n");
            return;
        }
    }

    users[currentUserIndex].requested[users[currentUserIndex].requestedCount++] = friendID;
    users[friendIndex].requests[users[friendIndex].requestCount++] = users[currentUserIndex].userID;

    saveUsersToFile();
    printf("Friend request sent successfully.\n");
}

void checkFriendRequests(int currentUserIndex) {
    printf("\n--- Friend Requests ---\n");
    if (users[currentUserIndex].requestCount == 0) {
        printf("No friend requests.\n");
        return;
    }

    for (int i = 0; i < users[currentUserIndex].requestCount; i++) {
        int requestIndex = findUserIndexByID(users[currentUserIndex].requests[i]);
        printf("%d. %s (%s)\n", i + 1, users[requestIndex].displayName, users[requestIndex].userID);
    }

    printf("Enter the number of the request to accept (or 0 to ignore): ");
    int choice;
    scanf("%d", &choice);

    if (choice < 1 || choice > users[currentUserIndex].requestCount) {
        printf("Invalid choice.\n");
        return;
    }

    int requestIndex = findUserIndexByID(users[currentUserIndex].requests[choice - 1]);

    users[currentUserIndex].friends[users[currentUserIndex].friendCount++] = users[requestIndex].userID;
    users[requestIndex].friends[users[requestIndex].friendCount++] = users[currentUserIndex].userID;

    for (int i = choice - 1; i < users[currentUserIndex].requestCount - 1; i++) {
        strcpy(users[currentUserIndex].requests[i], users[currentUserIndex].requests[i + 1]);
    }
    users[currentUserIndex].requestCount--;

    saveUsersToFile();
    printf("Friend request accepted.\n");
}

void chatboxMenu(int currentUserIndex) {
    printf("\n--- Chatbox ---\n");
    if (users[currentUserIndex].friendCount == 0) {
        printf("No friends to chat with.\n");
        return;
    }

    printf("Select a friend to open chat:\n");
    for (int i = 0; i < users[currentUserIndex].friendCount; i++) {
        int friendIndex = findUserIndexByID(users[currentUserIndex].friends[i]);
        printf("%d. %s (%s)\n", i + 1, users[friendIndex].displayName, users[friendIndex].userID);
    }
    printf("0. Go back\n");

    int choice;
    printf("Enter your choice: ");
    scanf("%d", &choice);

    if (choice == 0) return;

    if (choice < 1 || choice > users[currentUserIndex].friendCount) {
        printf("Invalid choice!\n");
        return;
    }

    int friendIndex = findUserIndexByID(users[currentUserIndex].friends[choice - 1]);
    chatWindow(currentUserIndex, friendIndex);
}

void chatWindow(int currentUserIndex, int friendIndex) {
    printf("\n--- Chat with %s (%s) ---\n", users[friendIndex].displayName, users[friendIndex].userID);

    printf("\nChat History:\n");
    for (int i = 0; i < users[currentUserIndex].messageCount; i++) {
        struct Message msg = users[currentUserIndex].messages[i];
        if ((strcmp(msg.senderID, users[currentUserIndex].userID) == 0 && strcmp(msg.receiverID, users[friendIndex].userID) == 0) ||
            (strcmp(msg.senderID, users[friendIndex].userID) == 0 && strcmp(msg.receiverID, users[currentUserIndex].userID) == 0)) {
            printf("[%s] %s: %s\n", msg.timestamp, msg.senderID, msg.content);
        }
    }

    char content[MESSAGE_LENGTH];
    printf("\nEnter your message (or type 'exit' to go back): ");
    getchar();
    fgets(content, MESSAGE_LENGTH, stdin);
    content[strcspn(content, "\n")] = '\0';

    if (strcmp(content, "exit") == 0) return;

    struct Message newMessage;
    strcpy(newMessage.senderID, users[currentUserIndex].userID);
    strcpy(newMessage.receiverID, users[friendIndex].userID);
    strcpy(newMessage.content, content);
    getCurrentTimestamp(newMessage.timestamp);

    users[currentUserIndex].messages[users[currentUserIndex].messageCount++] = newMessage;
    users[friendIndex].messages[users[friendIndex].messageCount++] = newMessage;

    saveUsersToFile();
    printf("Message sent!\n");
    chatWindow(currentUserIndex, friendIndex);
}

void loggedInMenu(int currentUserIndex) {
    int choice;
    do {
        printf("\n--- Logged-in Menu ---\n");
        printf("1. View friends\n");
        printf("2. Send friend request\n");
        printf("3. Check friend requests\n");
        printf("4. Chatbox\n");
        printf("5. Logout\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1: displayFriends(currentUserIndex); break;
            case 2: addFriend(currentUserIndex); break;
            case 3: checkFriendRequests(currentUserIndex); break;
            case 4: chatboxMenu(currentUserIndex); break;
            case 5: printf("Logged out.\n"); break;
            default: printf("Invalid choice!\n");
        }
    } while (choice != 5);
}

int main() {
    loadUsersFromFile();
    int choice;
    do {
        printf("\n--- Main Menu ---\n");
        printf("1. Register\n");
        printf("2. Login\n");
        printf("3. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1: registerUser(); break;
            case 2: {
                int userIndex = loginUser();
                if (userIndex != -1) loggedInMenu(userIndex);
                break;
            }
            case 3: printf("Exiting program.\n"); break;
            default: printf("Invalid choice!\n");
        }
    } while (choice != 3);

    return 0;
}
